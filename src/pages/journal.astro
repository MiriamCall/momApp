---
// src/pages/journal.astro
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase"; // For server-side session and data fetch

// 1. Secure the page, same as other authenticated pages
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

const {
  data: { user },
  error: authError,
} = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (authError) {
  Astro.cookies.delete("sb-access-token", { path: "/" });
  Astro.cookies.delete("sb-refresh-token", { path: "/" });
  return Astro.redirect("/signin");
}

// 2. Fetch journal entries for the logged-in user (server-side)
const { data: journalEntries, error: dbError } = await supabase
  .from("journal_entries")
  .select("*")
  .order("created_at", { ascending: false }); // Show most recent first
---

<Layout title="My Journal">
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-peach-700">My Journal</h1>
    </div>

    {
      dbError && (
        <p class="text-red-500">
          Error fetching journal entries: {dbError.message}
        </p>
      )
    }
    {
      (!journalEntries || journalEntries.length === 0) && !dbError && (
        <div class="text-center bg-gray-50 p-8 rounded-lg">
          <p class="text-gray-600">
            You haven't written any journal entries yet. Use the form below to
            add your first entry!
          </p>
        </div>
      )
    }

    <!-- Message UI Container (reused pattern) -->
    <div
      id="message-container"
      class="fixed top-0 left-0 w-full p-4 z-50 hidden"
    >
      <div
        id="message-box"
        class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative shadow-lg"
        role="alert"
      >
        <strong class="font-bold">Info!</strong>
        <span class="block sm:inline" id="message-text"></span>
        <div id="message-actions" class="mt-2 flex justify-end gap-2">
          <button
            id="message-confirm-btn"
            class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded text-sm hidden"
            >Yes</button
          >
          <button
            id="message-cancel-btn"
            class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-1 px-3 rounded text-sm hidden"
            >No</button
          >
        </div>
      </div>
    </div>

    <!-- Add New Journal Entry Form -->
    <section
      class="bg-white rounded-lg shadow-md p-6 mb-8 border border-peach-200"
    >
      <h2 class="text-2xl font-bold text-peach-700 mb-4">Add New Entry</h2>
      <form id="add-journal-form" class="space-y-4">
        <div>
          <label for="new-entry-text" class="block text-gray-700 text-left mb-2"
            >What's on your mind?</label
          >
          <textarea
            id="new-entry-text"
            name="entry_text"
            rows="5"
            class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-rose-500"
            placeholder="Write about your day, your baby's milestones, or anything else..."
            required></textarea>
        </div>
        <div class="flex justify-end">
          <button
            type="submit"
            class="bg-rose-500 hover:bg-peach-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500"
          >
            Add Entry
          </button>
        </div>
      </form>
    </section>

    <!-- Journal Entries List -->
    <section class="bg-white rounded-lg shadow-md overflow-hidden">
      <h2
        class="text-2xl font-bold text-peach-700 p-6 border-b border-gray-200"
      >
        Your Entries
      </h2>
      <ul
        role="list"
        id="journal-entries-list"
        class="divide-y divide-gray-200"
      >
        {
          journalEntries?.map((entry) => (
            <li
              class="p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center hover:bg-peach-50"
              data-entry-id={entry.id}
            >
              <div class="flex-grow mb-2 sm:mb-0 sm:pr-4">
                <p class="text-sm text-gray-500 mb-1">
                  {new Date(entry.created_at).toLocaleString("en-US", {
                    dateStyle: "medium",
                    timeStyle: "short",
                  })}
                  {entry.updated_at && entry.created_at !== entry.updated_at ? (
                    <span class="ml-2 text-xs text-gray-400">
                      (Edited:{" "}
                      {new Date(entry.updated_at).toLocaleString("en-US", {
                        dateStyle: "short",
                        timeStyle: "short",
                      })}
                      )
                    </span>
                  ) : (
                    ""
                  )}
                </p>
                <p
                  class="text-gray-800 leading-relaxed whitespace-pre-wrap"
                  data-entry-text
                >
                  {entry.entry_text}
                </p>
              </div>
              <div class="flex gap-2 flex-shrink-0">
                <button
                  class="edit-journal-btn text-blue-500 hover:underline text-sm"
                  data-entry-id={entry.id}
                  data-entry-text={entry.entry_text}
                >
                  Edit
                </button>
                <button
                  class="delete-journal-btn text-red-500 hover:underline text-sm"
                  data-entry-id={entry.id}
                >
                  Delete
                </button>
              </div>
            </li>
          ))
        }
      </ul>
    </section>

    <!-- Edit Journal Entry Modal -->
    <div
      id="edit-journal-modal-container"
      class="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 hidden"
    >
      <div
        class="bg-white p-8 rounded-lg shadow-xl max-w-sm w-full border border-peach-200"
      >
        <h2 class="text-2xl font-bold text-peach-700 mb-6 text-center">
          Edit Journal Entry
        </h2>
        <form id="edit-journal-form" class="space-y-4">
          <input type="hidden" id="edit-journal-id" name="id" />
          <div>
            <label
              for="edit-entry-text"
              class="block text-gray-700 text-left mb-2">Edit your entry:</label
            >
            <textarea
              id="edit-entry-text"
              name="entry_text"
              rows="7"
              class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-rose-500"
              required></textarea>
          </div>
          <div class="flex justify-end gap-4 mt-6">
            <button
              type="button"
              id="edit-journal-cancel-btn"
              class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
            >
              Cancel
            </button>
            <button
              type="submit"
              id="edit-journal-save-btn"
              class="bg-rose-500 hover:bg-peach-600 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500"
            >
              Save Changes
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</Layout>

<script
  define:vars={{ userId: user?.id, accessToken: accessToken.value }}
  type="module"
>
  import {
    insertJournalEntry,
    updateJournalEntry,
    deleteJournalEntry,
  } from "/scripts/journalActions.js";

  // --- Message UI Handlers (reused from records.astro) ---
  const messageContainer = document.getElementById("message-container");
  const messageBox = document.getElementById("message-box");
  const messageText = document.getElementById("message-text");
  const messageActions = document.getElementById("message-actions");
  const messageConfirmBtn = document.getElementById("message-confirm-btn");
  const messageCancelBtn = document.getElementById("message-cancel-btn");

  let resolveMessagePromise = null;

  function showMessage(msg, type = "info", showConfirm = false) {
    if (
      !messageContainer ||
      !messageBox ||
      !messageText ||
      !messageActions ||
      !messageConfirmBtn ||
      !messageCancelBtn
    ) {
      console.error("Message UI elements not found.");
      if (showConfirm) return Promise.resolve(false);
      return;
    }

    messageText.textContent = msg;
    messageContainer.classList.remove("hidden");
    messageBox.classList.remove(
      "bg-blue-100",
      "border-blue-400",
      "text-blue-700",
      "bg-red-100",
      "border-red-400",
      "text-red-700",
      "bg-green-100",
      "border-green-400",
      "text-green-700"
    );
    messageConfirmBtn.classList.add("hidden");
    messageCancelBtn.classList.add("hidden");
    messageActions.classList.add("hidden");

    if (type === "error") {
      messageBox.classList.add("bg-red-100", "border-red-400", "text-red-700");
    } else if (type === "success") {
      messageBox.classList.add(
        "bg-green-100",
        "border-green-400",
        "text-green-700"
      );
    } else {
      // info
      messageBox.classList.add(
        "bg-blue-100",
        "border-blue-400",
        "text-blue-700"
      );
    }

    if (showConfirm) {
      messageConfirmBtn.classList.remove("hidden");
      messageCancelBtn.classList.remove("hidden");
      messageActions.classList.remove("hidden");
      return new Promise((resolve) => {
        resolveMessagePromise = resolve;
      });
    } else {
      setTimeout(hideMessage, 3000);
    }
  }

  function hideMessage() {
    if (messageContainer) {
      messageContainer.classList.add("hidden");
    }
  }

  if (messageConfirmBtn) {
    messageConfirmBtn.addEventListener("click", () => {
      if (resolveMessagePromise) {
        resolveMessagePromise(true);
        hideMessage();
      }
    });
  }

  if (messageCancelBtn) {
    messageCancelBtn.addEventListener("click", () => {
      if (resolveMessagePromise) {
        resolveMessagePromise(false);
        hideMessage();
      }
    });
  }
  // --- End Message UI Handlers ---

  // --- Add Journal Entry Form Handlers ---
  const addJournalForm = document.getElementById("add-journal-form");
  const newEntryTextInput = document.getElementById("new-entry-text");
  const journalEntriesList = document.getElementById("journal-entries-list");

  if (addJournalForm) {
    addJournalForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      const entryText = newEntryTextInput.value.trim();

      if (!entryText) {
        showMessage("Journal entry cannot be empty.", "error");
        return;
      }
      if (!userId || !accessToken) {
        showMessage("Authentication required to add entry.", "error");
        return;
      }

      const result = await insertJournalEntry(entryText, userId, accessToken);

      if (result.success && result.data && result.data.length > 0) {
        const newEntry = result.data[0];
        // Create a new list item and prepend it to the list
        const listItem = document.createElement("li");
        listItem.className =
          "p-4 flex flex-col sm:flex-row justify-between items-start sm:items-center hover:bg-peach-50";
        listItem.dataset.entryId = newEntry.id;
        listItem.innerHTML = `
          <div class="flex-grow mb-2 sm:mb-0 sm:pr-4">
            <p class="text-sm text-gray-500 mb-1">
              ${new Date(newEntry.created_at).toLocaleString("en-US", { dateStyle: "medium", timeStyle: "short" })}
            </p>
            <p class="text-gray-800 leading-relaxed whitespace-pre-wrap" data-entry-text>${newEntry.entry_text}</p>
          </div>
          <div class="flex gap-2 flex-shrink-0">
            <button
              class="edit-journal-btn text-blue-500 hover:underline text-sm"
              data-entry-id="${newEntry.id}"
              data-entry-text="${newEntry.entry_text}"
            >
              Edit
            </button>
            <button
              class="delete-journal-btn text-red-500 hover:underline text-sm"
              data-entry-id="${newEntry.id}"
            >
              Delete
            </button>
          </div>
        `;
        journalEntriesList.prepend(listItem); // Add to the top of the list

        newEntryTextInput.value = ""; // Clear the textarea
        showMessage(result.message, "success");
      } else {
        showMessage(result.message, "error");
      }
    });
  }
  // --- End Add Journal Entry Form Handlers ---

  // --- Edit Journal Entry Modal Handlers ---
  const editJournalModalContainer = document.getElementById(
    "edit-journal-modal-container"
  );
  const editJournalForm = document.getElementById("edit-journal-form");
  const editJournalIdInput = document.getElementById("edit-journal-id");
  const editEntryTextInput = document.getElementById("edit-entry-text");
  const editJournalCancelBtn = document.getElementById(
    "edit-journal-cancel-btn"
  );

  function showEditJournalModal(entryId, entryText) {
    if (
      !editJournalModalContainer ||
      !editJournalIdInput ||
      !editEntryTextInput
    ) {
      console.error("Edit journal modal UI elements not found.");
      return;
    }
    editJournalIdInput.value = entryId;
    editEntryTextInput.value = entryText;
    editJournalModalContainer.classList.remove("hidden");
  }

  function hideEditJournalModal() {
    if (editJournalModalContainer && editJournalForm) {
      editJournalModalContainer.classList.add("hidden");
      editJournalForm.reset();
    }
  }

  if (editJournalCancelBtn) {
    editJournalCancelBtn.addEventListener("click", hideEditJournalModal);
  }

  if (editJournalForm) {
    editJournalForm.addEventListener("submit", async (event) => {
      event.preventDefault();
      const entryId = editJournalIdInput.value;
      const newEntryText = editEntryTextInput.value.trim();

      if (!newEntryText) {
        showMessage("Journal entry cannot be empty.", "error");
        return;
      }
      if (!userId || !accessToken) {
        showMessage("Authentication required to update entry.", "error");
        return;
      }

      const result = await updateJournalEntry(
        entryId,
        newEntryText,
        userId,
        accessToken
      );

      if (result.success) {
        // Update the text content in the list item
        const listItem = document.querySelector(
          `li[data-entry-id="${entryId}"]`
        );
        const entryTextSpan = listItem?.querySelector("[data-entry-text]");
        if (entryTextSpan) {
          entryTextSpan.textContent = newEntryText;
          // Update the updated_at timestamp display
          const updatedTimestampSpan = listItem.querySelector(
            ".text-xs.text-gray-400"
          );
          if (updatedTimestampSpan) {
            updatedTimestampSpan.textContent = `(Edited: ${new Date().toLocaleString("en-US", { dateStyle: "short", timeStyle: "short" })})`;
          } else {
            // If it didn't exist, create and append it
            const timestampParagraph = listItem.querySelector(
              ".text-sm.text-gray-500"
            );
            if (timestampParagraph) {
              const newSpan = document.createElement("span");
              newSpan.className = "ml-2 text-xs text-gray-400";
              newSpan.textContent = `(Edited: ${new Date().toLocaleString("en-US", { dateStyle: "short", timeStyle: "short" })})`;
              timestampParagraph.appendChild(newSpan);
            }
          }
        }
        showMessage(result.message, "success");
        hideEditJournalModal();
      } else {
        showMessage(result.message, "error");
      }
    });
  }
  // --- End Edit Journal Entry Modal Handlers ---

  document.addEventListener("DOMContentLoaded", () => {
    if (journalEntriesList) {
      journalEntriesList.addEventListener("click", async (event) => {
        const target = event.target;

        // Handle Delete button click
        if (target.classList.contains("delete-journal-btn")) {
          const entryId = target.dataset.entryId;
          if (entryId) {
            const confirmed = await showMessage(
              "Are you sure you want to delete this journal entry?",
              "info",
              true
            );
            if (confirmed) {
              if (!userId || !accessToken) {
                showMessage(
                  "Authentication required to delete entry.",
                  "error"
                );
                return;
              }

              const result = await deleteJournalEntry(
                entryId,
                userId,
                accessToken
              );

              if (result.success) {
                const listItem = target.closest("li");
                if (listItem) {
                  listItem.remove();
                }
                showMessage(result.message, "success");
              } else {
                showMessage(result.message, "error");
              }
            }
          }
        }

        // Handle Edit button click
        if (target.classList.contains("edit-journal-btn")) {
          const entryId = target.dataset.entryId;
          const entryText = target.dataset.entryText;
          if (entryId && entryText !== undefined) {
            showEditJournalModal(entryId, entryText);
          }
        }
      });
    }
  });
</script>
