---
import Layout from "../layouts/Layout.astro";
// 1. SERVER-SIDE IMPORT: For operations like `supabase.auth.setSession`
import { supabase } from "../lib/supabase";

// 1. Secure the page by checking for a valid session
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return Astro.redirect("/signin");
}

const { data, error } = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (error) {
  Astro.cookies.delete("sb-access-token", { path: "/" });
  Astro.cookies.delete("sb-refresh-token", { path: "/" });
  return Astro.redirect("/signin");
}

const user = data.user;
// Ensure it's null if not present, not undefined, for cleaner JS handling
const serverUserId = user?.id || null;
---

<Layout title="Timer Dashboard">
  <div
    class="container mx-auto px-4 py-8 text-center"
    data-user-id={serverUserId}
  >
    <h1 class="text-3xl font-bold text-peach-700 mb-2">
      Hi, {user?.email}!
    </h1>
    <p class="text-gray-600 mb-8">Ready to start a new nursing session?</p>

    <div
      id="timer-display"
      class="text-6xl font-mono bg-white rounded-lg shadow-inner p-6 mb-6 max-w-sm mx-auto"
    >
      00:00:00
    </div>

    <div id="side-selector" class="mb-6">
      <h2 class="text-xl font-semibold text-peach-700 mb-3">
        Which side are you nursing on?
      </h2>
      <div class="flex justify-center gap-4">
        <button
          id="btn-left"
          class="side-btn border-2 border-rose-400 text-rose-500 font-bold py-3 px-8 rounded-full transition"
          data-side="left"
        >
          Left
        </button>
        <button
          id="btn-right"
          class="side-btn border-2 border-rose-400 text-rose-500 font-bold py-3 px-8 rounded-full transition"
          data-side="right"
        >
          Right
        </button>
      </div>
    </div>

    <div class="flex justify-center gap-4">
      <button
        id="start-btn"
        class="bg-rose-500 text-white font-bold py-4 px-10 rounded-full shadow-lg hover:bg-rose-600 transition disabled:opacity-50"
        disabled
      >
        Start
      </button>
      <button
        id="stop-btn"
        class="bg-gray-500 text-white font-bold py-4 px-10 rounded-full shadow-lg hover:bg-gray-600 transition hidden"
      >
        Stop & Save
      </button>
    </div>

    <div class="mt-12 flex flex-col items-center gap-4">
      <a href="/records" class="text-peach-600 hover:underline font-semibold">
        View Past Nursing Records
      </a>
      <form action="/api/auth/signout">
        <button
          type="submit"
          class="bg-gray-200 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-300"
        >
          Sign Out
        </button>
      </form>
    </div>
  </div>

  <style>
    .side-btn.selected {
      background-color: #fecdd3; /* light pink */
      border-color: #fb7185; /* rose-400 */
    }
  </style>

  <script type="module">
    // 2. CLIENT-SIDE IMPORT: For browser-side operations
    // This uses the alias defined in tsconfig.json
    import { supabase } from "~/lib/supabase";

    // --- State Management ---
    let timerInterval = null;
    let seconds = 0;
    let startTime = null;
    let nursingSide = null;
    let currentUserId = null; // Will be populated from data-user-id

    // --- DOM Elements (declare globally, assign inside DOMContentLoaded) ---
    let timerDisplay;
    let startBtn;
    let stopBtn;
    let sideSelector;
    let sideButtons;
    let mainContainer; // Reference to the container with data-user-id

    // --- Timer Functions ---
    function formatTime(totalSeconds) {
      const hours = Math.floor(totalSeconds / 3600);
      const minutes = Math.floor((totalSeconds % 3600) / 60);
      const secs = totalSeconds % 60;
      return [hours, minutes, secs]
        .map((v) => v.toString().padStart(2, "0"))
        .join(":");
    }

    function updateTimerDisplay() {
      seconds++;
      timerDisplay.textContent = formatTime(seconds);
    }

    // --- DOM Ready Event Listener ---
    document.addEventListener("DOMContentLoaded", () => {
      // Assign DOM elements AFTER the DOM is fully loaded
      timerDisplay = document.getElementById("timer-display");
      startBtn = document.getElementById("start-btn");
      stopBtn = document.getElementById("stop-btn");
      sideSelector = document.getElementById("side-selector");
      sideButtons = document.querySelectorAll(".side-btn");
      mainContainer = document.querySelector(".container.mx-auto"); // Get the main container

      // Retrieve userId from data attribute
      const userIdFromAttribute = mainContainer?.dataset.userId;
      if (userIdFromAttribute && userIdFromAttribute !== "null") {
        currentUserId = userIdFromAttribute;
      } else {
        console.error(
          "User ID not found in data attribute or is null. User may not be logged in correctly."
        );
      }

      // --- Event Listeners ---
      sideButtons.forEach((button) => {
        button.addEventListener("click", () => {
          sideButtons.forEach((btn) => btn.classList.remove("selected"));
          button.classList.add("selected");
          nursingSide = button.getAttribute("data-side");
          startBtn.disabled = false;
        });
      });

      startBtn.addEventListener("click", async () => {
        if (!currentUserId) {
          alert(
            "Authentication error: User ID not found. Please sign in again."
          );
          window.location.href = "/signin";
          return;
        }

        startTime = new Date();
        seconds = 0;
        timerDisplay.textContent = formatTime(seconds);
        timerInterval = setInterval(updateTimerDisplay, 1000);

        startBtn.classList.add("hidden");
        stopBtn.classList.remove("hidden");
        sideSelector.style.display = "none";
      });

      stopBtn.addEventListener("click", async () => {
        const endTime = new Date();
        clearInterval(timerInterval);

        const nursingSession = {
          user_id: currentUserId,
          start_time: startTime.toISOString(),
          end_time: endTime.toISOString(),
          duration_seconds: seconds,
          nursing_side: nursingSide,
        };

        try {
          // supabase is already imported at the top of this module script
          const { error } = await supabase
            .from("nursing_sessions")
            .insert([nursingSession]);

          if (error) throw error;

          alert("Nursing session saved successfully!");
          window.location.href = "/records";
        } catch (error) {
          console.error("Error saving session:", error);
          alert(`Failed to save session: ${error.message}`);
        }

        startBtn.classList.remove("hidden");
        stopBtn.classList.add("hidden");
        startBtn.disabled = true;
        sideSelector.style.display = "block";
        sideButtons.forEach((btn) => btn.classList.remove("selected"));
        timerDisplay.textContent = "00:00:00";
        nursingSide = null;
      });
    });
  </script>
</Layout>
