---
// src/components/NavBar.astro
interface Props {
  isAuthenticated: boolean;
}

const { isAuthenticated } = Astro.props;
---

<nav
  aria-label="Main Navigation"
  class="fixed bottom-4 right-4 z-50 flex flex-col items-end"
>
  <div
    id="menu"
    class="absolute bottom-full right-0 mb-4 flex flex-col items-start space-y-3
    opacity-0 pointer-events-none max-h-0 overflow-hidden
    transition-all duration-300 ease-in-out
    bg-white rounded-xl shadow-lg border border-peach-200 p-4 min-w-[160px]"
    role="menu"
    aria-orientation="vertical"
    aria-hidden="true"
  >
    <a
      href="/"
      class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
      role="menuitem">Home</a
    >
    {
      isAuthenticated && (
        <>
          <a
            href="/dashboard"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Dashboard
          </a>
          <a
            href="/feeding_timer"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Timer
          </a>
          <a
            href="/records"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Records
          </a>
        </>
      )
    }
    <a
      href="/tips"
      class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
      role="menuitem">Tips</a
    >
    <a
      href="/music"
      class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
      role="menuitem">Music</a
    >
    <a
      href="/videos"
      class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
      role="menuitem">Videos</a
    >
    <a
      href="/books"
      class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
      role="menuitem">Books</a
    >
    {
      isAuthenticated && (
        <form action="/api/auth/signout" method="get" class="inline-block">
          {" "}
          {/* Added inline-block to form */}
          <button
            type="submit"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Sign Out
          </button>
        </form>
      )
    }
    {
      !isAuthenticated && (
        <>
          <a
            href="/signin"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Sign In
          </a>
          <a
            href="/register"
            class="text-peach-600 px-4 py-2 rounded-full hover:bg-peach-100 transition duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-peach-500"
            role="menuitem"
          >
            Register
          </a>
        </>
      )
    }
  </div>

  <button
    id="menuToggle"
    class="bg-rose-500 hover:bg-peach-600 text-white p-4 rounded-full shadow-lg
    transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500"
    aria-expanded="false"
    aria-controls="menu"
    aria-label="Open main menu"
  >
    <svg
      class="w-8 h-8 transition-transform duration-300"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>
</nav>

<script>
  // src/components/NavBar.astro script
  const toggle = document.getElementById("menuToggle");
  const menu = document.getElementById("menu");
  const toggleIconPath = toggle ? toggle.querySelector("svg path") : null;

  if (toggle && menu && toggleIconPath) {
    toggle.addEventListener("click", () => {
      const isMenuHidden = menu.classList.contains("opacity-0"); // Check current visibility

      // Toggle classes for visibility and animation
      menu.classList.toggle("opacity-0");
      menu.classList.toggle("pointer-events-none");
      menu.classList.toggle("max-h-0"); // Collapse height when hidden
      menu.classList.toggle("overflow-hidden"); // Hide overflow when collapsed
      menu.classList.toggle("max-h-screen"); // Expand height when visible (use a large enough value)

      // Toggle hamburger to X icon animation and ARIA attributes
      if (isMenuHidden) {
        toggleIconPath.setAttribute("d", "M6 18L18 6M6 6l12 12"); // To X
        toggle.setAttribute("aria-expanded", "true");
        menu.setAttribute("aria-hidden", "false");
        // Focus the first item in the menu when opened for keyboard users
        const firstMenuItem = menu.querySelector('a[role="menuitem"]');
        if (firstMenuItem) {
          (firstMenuItem as HTMLElement).focus();
        }
      } else {
        toggleIconPath.setAttribute("d", "M4 6h16M4 12h16M4 18h16"); // Back to hamburger
        toggle.setAttribute("aria-expanded", "false");
        menu.setAttribute("aria-hidden", "true");
        // Return focus to the toggle button after closing
        (toggle as HTMLElement).focus();
      }
    });

    // Close menu when clicking outside
    document.addEventListener("click", (event) => {
      if (
        menu &&
        toggle &&
        !toggle.contains(event.target as Node) &&
        !menu.contains(event.target as Node) &&
        !menu.classList.contains("opacity-0")
      ) {
        toggle.click(); // Simulate a click on the toggle to close
      }
    });

    // Trap focus inside menu when open for keyboard users
    menu.addEventListener("keydown", (event) => {
      if (event.key === "Tab" && !menu.classList.contains("opacity-0")) {
        const focusableElements = Array.from(
          menu.querySelectorAll('a[role="menuitem"]')
        ) as HTMLElement[];
        const first = focusableElements[0];
        const last = focusableElements[focusableElements.length - 1];

        if (event.shiftKey) {
          // Shift + Tab
          if (document.activeElement === first) {
            last.focus();
            event.preventDefault();
          }
        } else {
          // Tab
          if (document.activeElement === last) {
            first.focus();
            event.preventDefault();
          }
        }
      }
    });
  }

  // Script to handle active link styling
  document.addEventListener("astro:page-load", () => {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll("#menu a");
    const signOutButton = document.querySelector("#menu form button"); // Get the sign out button

    navLinks.forEach((link) => {
      // Remove existing active classes from all links
      link.classList.remove(
        "bg-rose-50",
        "text-rose-700",
        "font-bold",
        "border-2",
        "border-rose-500"
      );

      // Check if the link's href matches the current path
      // Special handling for the root path '/'
      if (
        link.getAttribute("href") === currentPath ||
        (currentPath === "/" && link.getAttribute("href") === "/")
      ) {
        // Apply new active styles: a subtle rose background, bold text, and a prominent rose border
        link.classList.add(
          "bg-rose-50",
          "text-rose-700",
          "font-bold",
          "border-2",
          "border-rose-500"
        );
      }
    });

    // Handle active styling for the sign out button if it exists and is on the signout page (though usually it's just a trigger)
    if (signOutButton && currentPath === "/api/auth/signout") {
      signOutButton.classList.add(
        "bg-rose-50",
        "text-rose-700",
        "font-bold",
        "border-2",
        "border-rose-500"
      );
    } else if (signOutButton) {
      // Ensure sign out button doesn't have active styles when not on its 'page'
      signOutButton.classList.remove(
        "bg-rose-50",
        "text-rose-700",
        "font-bold",
        "border-2",
        "border-rose-500"
      );
    }
  });
</script>
