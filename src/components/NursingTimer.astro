---
// src/components/NursingTimer.astro
// This component is designed to be used on a page where the user is already authenticated.
// The userId is passed as a prop from the parent page (e.g., feeding_timer.astro).

interface Props {
  userId: string;
}

const { userId } = Astro.props;
---

<div
  class="bg-white rounded-xl shadow-lg p-8 w-full max-w-md mx-auto border border-peach-200"
>
  <div class="mb-6">
    <h2 class="text-2xl font-bold text-peach-700 mb-4">Current Session</h2>
    <div class="text-5xl font-mono text-gray-800 mb-4" id="timerDisplay">
      00:00:00
    </div>
    <div class="flex justify-center gap-4 mb-6">
      <button
        id="startButton"
        class="bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-6 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
      >
        Start
      </button>
      <button
        id="stopButton"
        class="bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-6 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
        disabled
      >
        Stop
      </button>
      <button
        id="resetButton"
        class="bg-gray-500 hover:bg-gray-600 text-white font-semibold py-2 px-6 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
        disabled
      >
        Reset
      </button>
    </div>

    <div class="flex justify-center gap-4 mb-6">
      <button
        id="leftSideButton"
        class="side-button bg-blue-400 hover:bg-blue-500 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400"
        data-side="left"
      >
        Left Side
      </button>
      <button
        id="rightSideButton"
        class="side-button bg-purple-400 hover:bg-purple-500 text-white font-semibold py-2 px-4 rounded-full shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-purple-400"
        data-side="right"
      >
        Right Side
      </button>
    </div>

    <p id="selectedSide" class="text-lg font-medium text-gray-700 mb-4">
      Side: Not Selected
    </p>

    <button
      id="saveButton"
      class="w-full bg-rose-500 hover:bg-peach-600 text-white font-semibold py-3 px-4 rounded-lg shadow-md transition duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-rose-500"
      disabled
    >
      Save Nursing Session
    </button>
    <p id="saveMessage" class="text-sm mt-2 text-red-500"></p>
  </div>
</div>

<script type="module" define:vars={{ userId: userId }}>
  import { createClient } from "@supabase/supabase-js";

  // Initialize the client-side Supabase client
  // This client uses browser storage for session management and handles auth tokens automatically.
  const supabaseClient = createClient(
    import.meta.env.SUPABASE_URL,
    import.meta.env.SUPABASE_ANON_KEY
  );

  // Get references to DOM elements
  const timerDisplay = document.getElementById("timerDisplay");
  const startButton = document.getElementById("startButton");
  const stopButton = document.getElementById("stopButton");
  const resetButton = document.getElementById("resetButton");
  const leftSideButton = document.getElementById("leftSideButton");
  const rightSideButton = document.getElementById("rightSideButton");
  const selectedSideDisplay = document.getElementById("selectedSide");
  const saveButton = document.getElementById("saveButton");
  const saveMessage = document.getElementById("saveMessage");

  // --- DEBUGGING LOGS ---
  console.log("NursingTimer script loaded.");
  console.log("timerDisplay element:", timerDisplay);
  console.log("startButton element:", startButton);
  console.log("stopButton element:", stopButton);
  console.log("resetButton element:", resetButton);
  console.log("leftSideButton element:", leftSideButton);
  console.log("rightSideButton element:", rightSideButton);
  console.log("selectedSideDisplay element:", selectedSideDisplay);
  console.log("saveButton element:", saveButton);
  console.log("saveMessage element:", saveMessage);
  console.log("userId:", userId);
  console.log("Supabase URL:", import.meta.env.SUPABASE_URL);
  console.log("Supabase Anon Key exists:", !!import.meta.env.SUPABASE_ANON_KEY);
  // --- END DEBUGGING LOGS ---

  let timerInterval; // Stores the interval ID for the timer (for clearInterval)
  let seconds = 0; // Stores the current time in seconds for the session
  let selectedSide = null; // Stores the selected nursing side ('left' or 'right')
  let startTime = null; // Stores the Date object when the timer starts
  let endTime = null; // Stores the Date object when the timer stops

  /**
   * Formats total seconds into a HH:MM:SS string for display.
   * @param {number} totalSeconds - The total number of seconds elapsed.
   * @returns {string} Formatted time string (e.g., "00:01:30").
   */
  function formatTime(totalSeconds) {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const remainingSeconds = totalSeconds % 60;
    return `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}:${String(remainingSeconds).padStart(2, "0")}`;
  }

  /**
   * Starts the nursing timer.
   * Disables Start button, enables Stop button, clears messages.
   */
  function startTimer() {
    console.log("startTimer called");
    if (
      !startButton ||
      !stopButton ||
      !resetButton ||
      !saveButton ||
      !saveMessage ||
      !timerDisplay
    ) {
      console.error("One or more timer elements are missing in startTimer.");
      return;
    }
    startButton.disabled = true;
    stopButton.disabled = false;
    resetButton.disabled = true; // Cannot reset while timer is running
    saveButton.disabled = true; // Cannot save while timer is running
    saveMessage.textContent = ""; // Clear any previous messages

    // Capture start time when the timer begins
    startTime = new Date();

    timerInterval = setInterval(() => {
      seconds++;
      timerDisplay.textContent = formatTime(seconds);
    }, 1000);
    console.log("Timer started at:", startTime);
  }

  /**
   * Stops the nursing timer.
   * Enables Start and Reset buttons, and Save button if a side is selected.
   */
  function stopTimer() {
    console.log("stopTimer called");
    if (!startButton || !stopButton || !resetButton || !saveButton) {
      console.error("One or more timer elements are missing in stopTimer.");
      return;
    }
    startButton.disabled = false;
    stopButton.disabled = true;
    resetButton.disabled = false;
    clearInterval(timerInterval); // Stop the timer interval

    // Capture end time when the timer stops
    endTime = new Date();

    // Enable save button only if a side is already selected AND timer has run for some time
    if (selectedSide && seconds > 0) {
      saveButton.disabled = false;
    }
    console.log("Timer stopped at:", endTime, "Total seconds:", seconds);
  }

  /**
   * Resets the timer and selected side back to initial state.
   */
  function resetTimer() {
    console.log("resetTimer called");
    if (
      !timerDisplay ||
      !resetButton ||
      !saveButton ||
      !selectedSideDisplay ||
      !leftSideButton ||
      !rightSideButton ||
      !saveMessage
    ) {
      console.error("One or more timer elements are missing in resetTimer.");
      return;
    }
    stopTimer(); // Ensure timer is stopped first
    seconds = 0;
    timerDisplay.textContent = formatTime(seconds);
    resetButton.disabled = true;
    saveButton.disabled = true; // Disable save after reset
    selectedSide = null; // Clear selected side
    startTime = null; // Clear start time
    endTime = null; // Clear end time
    selectedSideDisplay.textContent = "Side: Not Selected";
    // Remove highlight from side buttons
    leftSideButton.classList.remove(
      "ring-2",
      "ring-offset-2",
      "ring-peach-500"
    );
    rightSideButton.classList.remove(
      "ring-2",
      "ring-offset-2",
      "ring-peach-500"
    );
    saveMessage.textContent = ""; // Clear any messages
    console.log("Timer reset.");
  }

  /**
   * Sets the selected nursing side and updates UI to reflect choice.
   * @param {string} side - 'left' or 'right'.
   */
  function selectSide(side) {
    console.log("selectSide called with:", side);
    if (
      !selectedSideDisplay ||
      !leftSideButton ||
      !rightSideButton ||
      !saveButton
    ) {
      console.error(
        "One or more side selection elements are missing in selectSide."
      );
      return;
    }
    selectedSide = side;
    selectedSideDisplay.textContent = `Side: ${side.charAt(0).toUpperCase() + side.slice(1)}`;

    // Add/remove highlight ring for visual feedback
    leftSideButton.classList.toggle("ring-2", side === "left");
    leftSideButton.classList.toggle("ring-offset-2", side === "left");
    rightSideButton.classList.toggle("ring-2", side === "right");
    rightSideButton.classList.toggle("ring-offset-2", side === "right");

    // If timer is stopped and a side is now selected, enable save button
    if (stopButton.disabled && seconds > 0) {
      saveButton.disabled = false;
    }
    console.log("Side selected:", side);
  }

  // Event Listeners for timer control buttons
  // Add checks for element existence before attaching listeners
  if (startButton) {
    startButton.addEventListener("click", startTimer);
    console.log("Start button event listener attached");
  } else {
    console.error("startButton not found, cannot attach event listener.");
  }

  if (stopButton) {
    stopButton.addEventListener("click", stopTimer);
    console.log("Stop button event listener attached");
  } else {
    console.error("stopButton not found, cannot attach event listener.");
  }

  if (resetButton) {
    resetButton.addEventListener("click", resetTimer);
    console.log("Reset button event listener attached");
  } else {
    console.error("resetButton not found, cannot attach event listener.");
  }

  // Event Listeners for side selection buttons
  if (leftSideButton) {
    leftSideButton.addEventListener("click", () => selectSide("left"));
    console.log("Left side button event listener attached");
  } else {
    console.error("leftSideButton not found, cannot attach event listener.");
  }

  if (rightSideButton) {
    rightSideButton.addEventListener("click", () => selectSide("right"));
    console.log("Right side button event listener attached");
  } else {
    console.error("rightSideButton not found, cannot attach event listener.");
  }

  /**
   * Handles saving the nursing session data to Supabase.
   * This function is asynchronous as it interacts with the Supabase API.
   */
  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      console.log("Save button clicked");
      if (!saveMessage || !selectedSideDisplay || !saveButton) {
        console.error(
          "One or more save elements are missing in saveButton click handler."
        );
        return;
      }
      // Basic validation before attempting to save
      if (seconds === 0) {
        saveMessage.textContent =
          "Timer is at 0. Start and stop the timer before saving.";
        return;
      }
      if (!selectedSide) {
        saveMessage.textContent =
          "Please select a side (Left or Right) before saving.";
        return;
      }
      if (!startTime || !endTime) {
        saveMessage.textContent =
          "Timer was not started or stopped correctly. Please reset and try again.";
        return;
      }

      saveButton.disabled = true; // Disable button to prevent multiple submissions
      saveMessage.textContent = "Saving session..."; // User feedback

      try {
        // Insert data into the 'nursing_sessions' table
        const { data, error } = await supabaseClient
          .from("nursing_sessions")
          .insert([
            {
              user_id: userId, // userId is securely passed from the server-side Astro page
              start_time: startTime.toISOString(), // Convert Date to ISO string for TIMESTAMPTZ
              end_time: endTime.toISOString(), // Convert Date to ISO string for TIMESTAMPTZ
              duration_seconds: seconds,
              nursing_side: selectedSide, // Renamed to match schema
            },
          ]);

        if (error) {
          console.error("Error saving nursing session:", error);
          saveMessage.textContent = `Error saving: ${error.message}`;
          saveButton.disabled = false; // Re-enable save button on error
        } else {
          console.log("Session saved successfully:", data);
          saveMessage.textContent = "Session saved successfully!";
          resetTimer(); // Reset the timer and side selection after successful save

          // Reload the page after a short delay to refresh the "Your Nursing History" list
          // This is a simple way to update the displayed list. For more complex apps,
          // you might fetch and append the new item dynamically without a full reload.
          setTimeout(() => {
            window.location.reload();
          }, 800); // Give the user a moment to see the success message
        }
      } catch (err) {
        console.error("Unexpected error saving nursing session:", err);
        saveMessage.textContent = `Unexpected error: ${err.message}`;
        saveButton.disabled = false; // Re-enable save button on error
      }
    });
    console.log("Save button event listener attached");
  } else {
    console.error("saveButton not found, cannot attach event listener.");
  }

  // Initial state setup when the component loads
  // Add checks before setting disabled property
  if (stopButton) stopButton.disabled = true;
  if (resetButton) resetButton.disabled = true;
  if (saveButton) saveButton.disabled = true;

  console.log("NursingTimer script initialization complete.");
</script>
